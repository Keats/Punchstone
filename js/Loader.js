// Generated by CoffeeScript 1.3.3
(function() {
  var Loader,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  P.Loader = {};

  Loader = (function() {
    var _imagesExtensions;

    _imagesExtensions = ['png', 'jpeg', 'jpg'];

    function Loader(scene) {
      this.scene = scene;
      this.totalToLoad = this.scene.assets.sounds.length + this.scene.assets.images.length;
      this.loaded = 0;
      this.finished = false;
      this.scene.loadedAssets = {};
      this.scene.loadedAssets.images = {};
      this.scene.loadedAssets.sounds = {};
      P.Util.addEventHandling(this);
      this.on("loaded", this._eventFileLoaded);
    }

    Loader.prototype._eventFileLoaded = function() {
      this.loaded++;
      this.draw();
      if (this.loaded === this.totalToLoad) {
        return this.finished = true;
      }
    };

    Loader.prototype._load = function() {
      var audio, audioName, couldntLoad, extension, image, imageName, _i, _j, _len, _len1, _ref, _ref1,
        _this = this;
      couldntLoad = [];
      _ref = this.scene.assets.images;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        image = _ref[_i];
        extension = image.substr(image.lastIndexOf(".") + 1).toLowerCase();
        imageName = image.substr(image.lastIndexOf("/") + 1).toLowerCase();
        if (__indexOf.call(_imagesExtensions, extension) >= 0) {
          if (!this.scene.loadedAssets.images[imageName]) {
            this._loadImage(image, imageName, function(image, name) {
              _this.scene.loadedAssets.images[name] = image;
              return _this.fire("loaded");
            });
          } else {
            couldntLoad.push(image);
          }
        }
      }
      _ref1 = this.scene.assets.sounds;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        audio = _ref1[_j];
        audioName = audio.substr(audio.lastIndexOf("/") + 1).toLowerCase();
        if (!this.scene.loadedAssets.sounds[audioName]) {
          audio = audio + "." + P.detect.preferedAudioFormat;
          this.scene.loadedAssets.sounds[audioName] = this._loadSound(audio);
          this.fire("loaded");
        } else {
          couldntLoad.push(audio);
        }
      }
      if (couldntLoad.length > 0) {
        return couldntLoad;
      }
    };

    Loader.prototype._loadSound = function(file) {
      var sound;
      sound = new Audio();
      sound.preload = "auto";
      sound.volume = 1;
      sound.src = file;
      return sound;
    };

    Loader.prototype._loadImage = function(file, name, callback) {
      var image;
      image = new Image();
      image.src = file;
      return image.onload = function() {
        return callback(image, name);
      };
    };

    Loader.prototype.draw = function() {
      var percentage;
      percentage = Math.round((this.loaded / this.totalToLoad) * 100) + " %";
      P.canvas.clear();
      P.canvas.context.fillStyle = "#00f";
      return P.canvas.context.fillText(percentage, P.canvas.centerX, P.canvas.centerY);
    };

    return Loader;

  })();

  P.Loader = Loader;

}).call(this);
