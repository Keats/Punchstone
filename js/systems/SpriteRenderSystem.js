// Generated by CoffeeScript 1.3.3
(function() {
  var SpriteRenderSystem,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  P.systems.SpriteRenderSystem = {};

  SpriteRenderSystem = (function(_super) {

    __extends(SpriteRenderSystem, _super);

    function SpriteRenderSystem() {
      SpriteRenderSystem.__super__.constructor.call(this, "Sprite", "Position");
      this.spritesheets = {};
    }

    SpriteRenderSystem.prototype.initialize = function() {
      this.positionMapper = new P.Artemis.ComponentMapper("Position", this.world);
      return this.spriteMapper = new P.Artemis.ComponentMapper("Sprite", this.world);
    };

    SpriteRenderSystem.prototype.processEntity = function(entity) {
      var position, sprite;
      position = this.positionMapper.get(entity);
      sprite = this.spriteMapper.get(entity);
      if (!(sprite.spritesheetName in this.spritesheets)) {
        this.normalizeSpritesheet(sprite);
      }
      if (sprite.currentAnim) {
        if (sprite._timeSinceLastUpdate >= sprite.animations[sprite.currentAnim].frameTime) {
          if (this.isNextFrameInAnimation(sprite)) {
            sprite._currentFrame++;
          } else {
            sprite._currentFrame = 0;
          }
          sprite._timeSinceLastUpdate = 0;
        } else {
          sprite._timeSinceLastUpdate += this.world.delta;
        }
      } else {
        sprite.currentAnim = "idle";
      }
      return this.draw(sprite, position);
    };

    SpriteRenderSystem.prototype.normalizeSpritesheet = function(sprite) {
      var image, numberOfColumns, numberOfRows;
      image = P.scene.loadedAssets.images[sprite.spritesheetName];
      numberOfColumns = image.width / sprite.spritesheetSizeX;
      numberOfRows = image.height / sprite.spritesheetSizeY;
      return this.spritesheets[sprite.spritesheetName] = {
        width: image.width,
        height: image.height,
        rows: numberOfRows,
        columns: numberOfColumns
      };
    };

    SpriteRenderSystem.prototype.isNextFrameInAnimation = function(sprite) {
      var inAnim, _ref;
      inAnim = false;
      if ((sprite.animations[sprite.currentAnim].start <= (_ref = sprite._currentFrame + 1) && _ref <= sprite.animations[sprite.currentAnim].end)) {
        inAnim = true;
      }
      return inAnim;
    };

    SpriteRenderSystem.prototype.draw = function(sprite, position) {
      var column, frame, image, row, spritesheet;
      image = P.scene.loadedAssets.images[sprite.spritesheetName];
      spritesheet = this.spritesheets[sprite.spritesheetName];
      row = 0;
      column = 0;
      frame = 0;
      while (row !== spritesheet.rows) {
        while (column !== (spritesheet.columns - 1)) {
          if (frame === sprite._currentFrame) {
            break;
          } else {
            frame++;
          }
          column++;
        }
        row++;
      }
      row--;
      return P.canvas.context.drawImage(image, column * 64, row * 64, 64, 64, position.x, position.y, 64, 64);
    };

    return SpriteRenderSystem;

  })(P.Artemis.EntityProcessingSystem);

  P.systems.SpriteRenderSystem = SpriteRenderSystem;

}).call(this);
