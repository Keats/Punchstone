// Generated by CoffeeScript 1.3.3
(function() {
  var SpriteRenderSystem,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  P.systems.SpriteRenderSystem = {};

  SpriteRenderSystem = (function(_super) {

    __extends(SpriteRenderSystem, _super);

    function SpriteRenderSystem() {
      SpriteRenderSystem.__super__.constructor.call(this, "Sprite", "Position");
    }

    SpriteRenderSystem.prototype.initialize = function() {
      this.positionMapper = new P.Artemis.ComponentMapper("Position", this.world);
      return this.spriteMapper = new P.Artemis.ComponentMapper("Sprite", this.world);
    };

    SpriteRenderSystem.prototype.processEntity = function(entity) {
      var position, sprite, tile;
      position = this.positionMapper.get(entity);
      sprite = this.spriteMapper.get(entity);
      if (sprite._currentAnimation) {
        if (sprite._timeSinceLastUpdate >= sprite._currentAnimation.frameTime) {
          tile = this.nextFrame(sprite);
          sprite._timeSinceLastUpdate = 0;
        } else {
          tile = sprite._currentAnimation.frames[sprite._currentFrame];
          sprite._timeSinceLastUpdate += this.world.delta;
        }
        return this.draw(position, sprite, tile);
      } else {
        return sprite._currentAnimation = sprite.animations["idle"];
      }
    };

    SpriteRenderSystem.prototype.nextFrame = function(sprite) {
      var tile;
      sprite._currentFrame = (sprite._currentFrame + 1) % sprite._currentAnimation.frames.length;
      tile = sprite._currentAnimation.frames[sprite._currentFrame];
      return tile;
    };

    SpriteRenderSystem.prototype.draw = function(position, sprite, tile) {
      var image, startingX, startingY;
      startingX = (tile % sprite.numberTilesPerRow) * sprite.width;
      startingY = Math.floor(tile / sprite.numberTilesPerRow) * sprite.height;
      image = P.scene.loadedAssets.images[sprite.spritesheetName];
      return P.canvas.context.drawImage(image, startingX, startingY, sprite.width, sprite.height, position.x, position.y, sprite.width, sprite.height);
    };

    return SpriteRenderSystem;

  })(P.Artemis.EntityProcessingSystem);

  P.systems.SpriteRenderSystem = SpriteRenderSystem;

}).call(this);
